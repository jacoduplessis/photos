/* App.html generated by Svelte v1.41.1 */
var Photos = (function() { "use strict";

	function hasNextPage(page, pages) {
  return pages !== 0 && page < pages
};

	function data() {
  return {
    api_key: '',
    user_id: '',
    filters: {},
    photos: [],
    loading: false,
    showFilters: false,
    total: 0,
    page: 1,
    pages: 1,
  }
};

	var methods = {
  getJSON: function (method, params) {
    let url = 'https://api.flickr.com/services/rest/?format=json&nojsoncallback=1'
    url += '&api_key=' + this.get('api_key')
    url += '&method=' + method
    if (params) {
      Object.keys(params).forEach(function (key) {
        url += '&' + key + '=' + params[key]
      })
    }

    return fetch(url).then(r => r.json())

  },
  appendPage(page) {
    this.getPhotos({page: page}, true)
  },
  getPhotos: function (adhocFilters, append) {

    this.set({loading: true})
    const defaultParams = {
      user_id: this.get('user_id'),
      extras: 'views,url_sq,url_t,url_s,url_q,url_m,url_l,geo,tags,description,date_taken,machine_tags'
    }
    const params = Object.assign({}, defaultParams, this.get('filters'), adhocFilters || {})
    this.getJSON("flickr.photos.search", params).then(data => {
      const newPhotos = data.photos.photo
      const photos = append ? this.get('photos').concat(newPhotos) : newPhotos
      this.set({
        photos: photos,
        pages: data.photos.pages,
        total: data.photos.total,
        page: data.photos.page,
        loading: false
      })
    })
  },
  setDeep: function (keypath, value) {
    if (keypath === undefined) {
      return;
    }
    var keys = keypath.replace(/\[(\d+)\]/g, '.$1').split('.');
    var lastKey = keys.pop();
    // If not a nested keypath
    if (keys[0] === undefined) {
      var data_1 = {};
      data_1[lastKey] = value;
      this.set(data_1);
      return;
    }
    var object = this.get(keys[0]);
    for (var i = 1; i < keys.length; i++) {
      object = object[keys[i]];
    }
    object[lastKey] = value;
    var data = {};
    data[keys[0]] = this.get(keys[0]);
    this.set(data);
  }
};

const api_key = '55a59914b837cf3472a26f06a898ec1a'
const user_id = '154269812@N04'

	function encapsulateStyles(node) {
		setAttribute(node, "svelte-2544191420", "");
	}

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-2544191420-style';
		style.textContent = "[svelte-2544191420].loading,[svelte-2544191420] .loading{padding:0.3rem 1rem;background-color:#666;margin:1rem 0;color:white;font-weight:600;position:fixed;top:1rem;right:2rem}[svelte-2544191420].photos,[svelte-2544191420] .photos{display:flex;flex-flow:row wrap;justify-content:center}[svelte-2544191420].photos .photo,[svelte-2544191420] .photos .photo{margin:0 1rem 1rem 0}img[svelte-2544191420],[svelte-2544191420] img{display:block;max-width:100%}[svelte-2544191420].notice,[svelte-2544191420] .notice{padding:2rem;background-color:darkred;color:#fff;width:100%\n  }[svelte-2544191420].extra,[svelte-2544191420] .extra,[svelte-2544191420].tags,[svelte-2544191420] .tags{margin-top:0.4rem}[svelte-2544191420].tags,[svelte-2544191420] .tags{display:flex;flex-wrap:wrap}[svelte-2544191420].tag,[svelte-2544191420] .tag{padding:0.3rem 0.5rem;background-color:whitesmoke;font-weight:600;font-size:0.9rem;margin-bottom:0.3rem}[svelte-2544191420].tag:not(:last-of-type),[svelte-2544191420] .tag:not(:last-of-type){margin-right:0.3rem}[svelte-2544191420].photo,[svelte-2544191420] .photo{margin:2rem 0}[svelte-2544191420].photo .title,[svelte-2544191420] .photo .title{margin-bottom:0.2rem}[svelte-2544191420].photo .meta,[svelte-2544191420] .photo .meta{display:flex;justify-content:space-between;margin-bottom:1rem;margin-top:0.4rem;flex-wrap:wrap}button[svelte-2544191420],[svelte-2544191420] button{padding:0.4rem 0.8rem;border:none;border-radius:3px;background-color:#ddd;cursor:pointer}button[svelte-2544191420]:hover,[svelte-2544191420] button:hover{background-color:darkgray}button[svelte-2544191420].is-big,[svelte-2544191420] button.is-big{padding:0.8rem 1.2rem}[svelte-2544191420].btn-filter,[svelte-2544191420] .btn-filter{height:2.3rem;align-self:flex-end;padding-left:1rem;padding-right:1rem}[svelte-2544191420].action,[svelte-2544191420] .action{text-decoration:underline;color:darkblue;cursor:pointer;margin-right:0.4rem}input[svelte-2544191420][type=\"text\"],[svelte-2544191420] input[type=\"text\"],select[svelte-2544191420],[svelte-2544191420] select{padding:0.3rem 0.6rem;border-radius:3px;border:2px solid #ccc;height:1.5rem}select[svelte-2544191420],[svelte-2544191420] select{height:2.3rem;background-color:#fff}[svelte-2544191420].filters,[svelte-2544191420] .filters{display:flex;flex-flow:row wrap}[svelte-2544191420].control,[svelte-2544191420] .control{display:flex;flex-direction:column;margin-right:1rem}";
		appendNode(style, document.head);
	}

	function create_main_fragment(state, component) {
		var text, text_1, div, text_3, if_block_2_anchor;

		var if_block = (state.loading) && create_if_block(state, component);

		var if_block_1 = (state.showFilters) && create_if_block_1(state, component);

		var photos = state.photos;

		var each_blocks = [];

		for (var i = 0; i < photos.length; i += 1) {
			each_blocks[i] = create_each_block(state, photos, photos[i], i, component);
		}

		var if_block_2 = (state.hasNextPage) && create_if_block_2(state, component);

		return {
			c: function create() {
				if (if_block) if_block.c();
				text = createText("\n\n");
				if (if_block_1) if_block_1.c();
				text_1 = createText("\n\n\n");
				div = createElement("div");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_3 = createText("\n\n");
				if (if_block_2) if_block_2.c();
				if_block_2_anchor = createComment();
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div.className = "photos";
			},

			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insertNode(text, target, anchor);
				if (if_block_1) if_block_1.m(target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(div, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}

				insertNode(text_3, target, anchor);
				if (if_block_2) if_block_2.m(target, anchor);
				insertNode(if_block_2_anchor, target, anchor);
			},

			p: function update(changed, state) {
				if (state.loading) {
					if (!if_block) {
						if_block = create_if_block(state, component);
						if_block.c();
						if_block.m(text.parentNode, text);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (state.showFilters) {
					if (if_block_1) {
						if_block_1.p(changed, state);
					} else {
						if_block_1 = create_if_block_1(state, component);
						if_block_1.c();
						if_block_1.m(text_1.parentNode, text_1);
					}
				} else if (if_block_1) {
					if_block_1.u();
					if_block_1.d();
					if_block_1 = null;
				}

				var photos = state.photos;

				if (changed.photos) {
					for (var i = 0; i < photos.length; i += 1) {
						if (each_blocks[i]) {
							each_blocks[i].p(changed, state, photos, photos[i], i);
						} else {
							each_blocks[i] = create_each_block(state, photos, photos[i], i, component);
							each_blocks[i].c();
							each_blocks[i].m(div, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = photos.length;
				}

				if (state.hasNextPage) {
					if (if_block_2) {
						if_block_2.p(changed, state);
					} else {
						if_block_2 = create_if_block_2(state, component);
						if_block_2.c();
						if_block_2.m(if_block_2_anchor.parentNode, if_block_2_anchor);
					}
				} else if (if_block_2) {
					if_block_2.u();
					if_block_2.d();
					if_block_2 = null;
				}
			},

			u: function unmount() {
				if (if_block) if_block.u();
				detachNode(text);
				if (if_block_1) if_block_1.u();
				detachNode(text_1);
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(text_3);
				if (if_block_2) if_block_2.u();
				detachNode(if_block_2_anchor);
			},

			d: function destroy() {
				if (if_block) if_block.d();
				if (if_block_1) if_block_1.d();

				destroyEach(each_blocks);

				if (if_block_2) if_block_2.d();
			}
		};
	}

	// (2:0) {{#if loading}}
	function create_if_block(state, component) {
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.textContent = "Loading...";
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div.className = "loading";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (6:0) {{#if showFilters}}
	function create_if_block_1(state, component) {
		var div, div_1, label, text_1, input, input_updating = false, text_3, div_2, label_1, text_5, select, option, option_1, option_2, option_3, text_10, div_3, label_2, text_12, select_1, option_4, option_5;

		function input_input_handler() {
			input_updating = true;
			var state = component.get();
			state.filters.text = input.value;
			component.set({ filters: state.filters });
			input_updating = false;
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				label = createElement("label");
				label.textContent = "Search";
				text_1 = createText("\n    ");
				input = createElement("input");
				text_3 = createText("\n\n  ");
				div_2 = createElement("div");
				label_1 = createElement("label");
				label_1.textContent = "Tag";
				text_5 = createText("\n    ");
				select = createElement("select");
				option = createElement("option");
				option_1 = createElement("option");
				option_1.textContent = "bird";
				option_2 = createElement("option");
				option_2.textContent = "landscape";
				option_3 = createElement("option");
				option_3.textContent = "animal";
				text_10 = createText("\n\n  \n  ");
				div_3 = createElement("div");
				label_2 = createElement("label");
				label_2.textContent = "Order";
				text_12 = createText("\n    ");
				select_1 = createElement("select");
				option_4 = createElement("option");
				option_4.textContent = "Newer First";
				option_5 = createElement("option");
				option_5.textContent = "Older First";
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(div);
				div.className = "filters";
				div_1.className = "control";
				input.type = "text";
				input.name = "search";
				addListener(input, "input", input_input_handler);
				div_2.className = "control";
				option_1.__value = "bird";
				option_1.value = option_1.__value;
				option_2.__value = "landscape";
				option_2.value = option_2.__value;
				option_3.__value = "animal";
				option_3.value = option_3.__value;
				setAttribute(select, "v-model", "filters.tag");
				select.name = "tag";
				div_3.className = "control";
				option_4.__value = "date-taken-desc";
				option_4.value = option_4.__value;
				option_4.selected = true;
				option_5.__value = "date-taken-asc";
				option_5.value = option_5.__value;
				setAttribute(select_1, "v-model", "filters.sort");
				select_1.name = "order";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(label, div_1);
				appendNode(text_1, div_1);
				appendNode(input, div_1);

				input.value = state.filters.text;

				appendNode(text_3, div);
				appendNode(div_2, div);
				appendNode(label_1, div_2);
				appendNode(text_5, div_2);
				appendNode(select, div_2);
				appendNode(option, select);

				option.__value = option.textContent;

				appendNode(option_1, select);
				appendNode(option_2, select);
				appendNode(option_3, select);
				appendNode(text_10, div);
				appendNode(div_3, div);
				appendNode(label_2, div_3);
				appendNode(text_12, div_3);
				appendNode(select_1, div_3);
				appendNode(option_4, select_1);
				appendNode(option_5, select_1);
			},

			p: function update(changed, state) {
				if (!input_updating) {
					input.value = state.filters.text;
				}

				option.__value = option.textContent;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(input, "input", input_input_handler);
			}
		};
	}

	// (51:2) {{#each photos as photo}}
	function create_each_block(state, photos, photo, photo_index, component) {
		var a, a_href_value, a_data_caption_value, img, img_src_value, img_title_value, img_alt_value;

		return {
			c: function create() {
				a = createElement("a");
				img = createElement("img");
				this.h();
			},

			h: function hydrate() {
				a.className = "photo";
				a.href = a_href_value = photo.url_l;
				setAttribute(a, "data-caption", a_data_caption_value = "" + photo.title + " " + photo.datetaken + " " + photo.description._content);
				img.src = img_src_value = photo.url_q;
				img.title = img_title_value = photo.title;
				img.alt = img_alt_value = photo.title;
			},

			m: function mount(target, anchor) {
				insertNode(a, target, anchor);
				appendNode(img, a);
			},

			p: function update(changed, state, photos, photo, photo_index) {
				if ((changed.photos) && a_href_value !== (a_href_value = photo.url_l)) {
					a.href = a_href_value;
				}

				if ((changed.photos) && a_data_caption_value !== (a_data_caption_value = "" + photo.title + " " + photo.datetaken + " " + photo.description._content)) {
					setAttribute(a, "data-caption", a_data_caption_value);
				}

				if ((changed.photos) && img_src_value !== (img_src_value = photo.url_q)) {
					img.src = img_src_value;
				}

				if ((changed.photos) && img_title_value !== (img_title_value = photo.title)) {
					img.title = img_title_value;
				}

				if ((changed.photos) && img_alt_value !== (img_alt_value = photo.title)) {
					img.alt = img_alt_value;
				}
			},

			u: function unmount() {
				detachNode(a);
			},

			d: noop
		};
	}

	// (59:0) {{#if hasNextPage}}
	function create_if_block_2(state, component) {
		var button, text, text_1_value = state.page+1, text_1, text_2, text_3, text_4, text_5, text_6;

		function click_handler(event) {
			var state = component.get();
			component.appendPage(state.page+1);
		}

		return {
			c: function create() {
				button = createElement("button");
				text = createText("Load More (");
				text_1 = createText(text_1_value);
				text_2 = createText(" of ");
				text_3 = createText(state.pages);
				text_4 = createText(", ");
				text_5 = createText(state.total);
				text_6 = createText(" total)");
				this.h();
			},

			h: function hydrate() {
				encapsulateStyles(button);
				setStyle(button, "display", "flex");
				setStyle(button, "margin", "1rem auto");
				addListener(button, "click", click_handler);
			},

			m: function mount(target, anchor) {
				insertNode(button, target, anchor);
				appendNode(text, button);
				appendNode(text_1, button);
				appendNode(text_2, button);
				appendNode(text_3, button);
				appendNode(text_4, button);
				appendNode(text_5, button);
				appendNode(text_6, button);
			},

			p: function update(changed, state) {
				if ((changed.page) && text_1_value !== (text_1_value = state.page+1)) {
					text_1.data = text_1_value;
				}

				if (changed.pages) {
					text_3.data = state.pages;
				}

				if (changed.total) {
					text_5.data = state.total;
				}
			},

			u: function unmount() {
				detachNode(button);
			},

			d: function destroy() {
				removeListener(button, "click", click_handler);
			}
		};
	}

	function Photos(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._recompute({ page: 1, pages: 1 }, this._state);

		if (!document.getElementById("svelte-2544191420-style")) add_css();

		this._fragment = create_main_fragment(this._state, this);

		if (options.target) {
			this._fragment.c();
			this._fragment.m(options.target, options.anchor || null);
		}
	}

	assign(Photos.prototype, methods, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount
	 });

	Photos.prototype._recompute = function _recompute(changed, state) {
		if (changed.page || changed.pages) {
			if (differs(state.hasNextPage, (state.hasNextPage = hasNextPage(state.page, state.pages)))) changed.hasNextPage = true;
		}
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function createComment() {
		return document.createComment('');
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function noop() {}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function init(component, options) {
		component.options = options;

		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._root = options._root || component;
		component._yield = options._yield;
		component._bind = options._bind;
	}

	function assign(target) {
		var k,
			source,
			i = 1,
			len = arguments.length;
		for (; i < len; i++) {
			source = arguments[i];
			for (k in source) target[k] = source[k];
		}

		return target;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this._root._lock) return;
		this._root._lock = true;
		callAll(this._root._beforecreate);
		callAll(this._root._oncreate);
		callAll(this._root._aftercreate);
		this._root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign({}, oldState, newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}

	function _mount(target, anchor) {
		this._fragment.m(target, anchor);
	}

	function _unmount() {
		this._fragment.u();
	}

	function differs(a, b) {
		return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.pop()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return Photos;
}());